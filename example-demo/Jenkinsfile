def GITLAB_SSH_PATH = '/root/.ssh/id_rsa' // jenkins-slave ssh key private path

node("jenkins_katalon_agent"){
    stage('Clone Project') {
        dir(env.PROJECT) {
            git branch: env.BRANCH,
                credentialsId: 'jenkins-git-account',
                url: env.HTTP_URL
        }
    }
    
    stage('Set Build Name') {
        currentBuild.displayName = "${BUILD_NUMBER}-${env.PROJECT}-${BRANCH}"
    }
    
      withEnv(["DOCKER_BUILDKIT=1"]) {
        stage('Build Project') {
          docker.withRegistry('https://eu.gcr.io', 'gcr:testing') {
            sh "rm '${env.PROJECT}/phpunit.xml' '${env.PROJECT}/clover.xml' || true"
            if("${env.PROJECT}" == "hotel"){
            sh """
                
                docker run --rm --interactive -w "/var/www/${env.PROJECT}" \
                  --volume "\$(pwd)/${env.PROJECT}":"/var/www/${env.PROJECT}" \
                  --volume ${GITLAB_SSH_PATH}:/root/.ssh/id_rsa \
                  enuygun-testing/base-images/php_app:latest  \
                  /bin/sh -c 'echo "Host *\\n\\tStrictHostKeyChecking no\\n" >> ~/.ssh/config && cp .env.test .env && COMPOSER_PROCESS_TIMEOUT=3000 composer install --no-scripts && composer run-script phpunit || true'
              """
            }
            else{
                sh """
                
                docker run --rm --interactive -w "/var/www/${env.PROJECT}" \
                  --volume "\$(pwd)/${env.PROJECT}":"/var/www/${env.PROJECT}" \
                  --volume ${GITLAB_SSH_PATH}:/root/.ssh/id_rsa \
                  enuygun-testing/base-images/php_app:latest  \
                  /bin/sh -c 'echo "Host *\\n\\tStrictHostKeyChecking no\\n" >> ~/.ssh/config && COMPOSER_PROCESS_TIMEOUT=3000 composer install --no-scripts && COMPOSER_PROCESS_TIMEOUT=3000 composer run-script phpunit || true'
              """
            }

        }
      }
      if("${env.PROJECT}" == "Bus"){
        stage('Check Change Log') {
          
          docker.withRegistry('https://eu.gcr.io', 'gcr:testing') {
            try{
            sh """
                
                docker run --rm --interactive -w "/var/www/${env.PROJECT}" \
                  --volume "\$(pwd)/${env.PROJECT}":"/var/www/${env.PROJECT}" \
                  --volume ${GITLAB_SSH_PATH}:/root/.ssh/id_rsa \
                  enuygun-testing/base-images/php_app:latest  \
                  /bin/sh -c 'cp .env.dist .env && ./bin/console check-ci changelog'
              """
                }
            catch (err) {
                unstable("[ERROR]: ${STAGE_NAME} failed!")
                currentBuild.result = "SUCCESS"
            }

        }
      }
      
        stage('ESLINT') {
          
          docker.withRegistry('https://eu.gcr.io', 'gcr:testing') {
            try{
            sh """
                
                docker run --rm --interactive -w "/var/www/${env.PROJECT}" \
                  --volume "\$(pwd)/${env.PROJECT}":"/var/www/${env.PROJECT}" \
                  --volume ${GITLAB_SSH_PATH}:/root/.ssh/id_rsa \
                  enuygun-testing/base-images/php_app:latest  \
                  /bin/sh -c 'yarn install && node_modules/eslint/bin/eslint.js assets/js'
              """
                }
            catch (err) {
                unstable("[ERROR]: ${STAGE_NAME} failed!")
                currentBuild.result = "SUCCESS"
            }

        }
      }
      }
    }
    stage('Run Sonar Scanner') {
       withCredentials([string(credentialsId: 'sonar-token', variable: 'sonar_token'),string(credentialsId: 'Gitlab_access_token_enbot', variable: 'sonar_gitlab_token')]){
       println(params.LAST_COMMIT_SHA)
       version_3_char = params.LAST_COMMIT_SHA?.substring(0,3)
       println(version_3_char)
       sh """ cat '${env.PROJECT}'/sonar-project.properties.dist | sed "s/.*sonar.login.*/sonar.login=${sonar_token}/g" > '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s/.*sonar.gitlab.user_token.*/sonar.gitlab.user_token=${sonar_gitlab_token}/g" '${env.PROJECT}'/sonar-project.properties """  
       sh """ sed -i -e "s@.*sonar.gitlab.ref_name.*@sonar.gitlab.ref_name=${env.BRANCH}/@" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s/.*sonar.gitlab.commit_sha.*/sonar.gitlab.commit_sha=${env.LAST_COMMIT_SHA}/g" '${env.PROJECT}'/sonar-project.properties """  
       sh """ sed -i -e "s/.*sonar.gitlab.project_id.*/sonar.gitlab.project_id=${env.PROJECT_ID}/g" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s/.*sonar.analysis.project_id.*/sonar.analysis.project_id=${env.PROJECT_ID}/g" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s/.*sonar.analysis.mr_iid.*/sonar.analysis.mr_iid=${env.MR_IID}/g" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s/.*sonar.analysis.user_name.*/sonar.analysis.user_name=${env.USER_NAME}/g" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s@.*sonar.tests.*@sonar.tests=/var/www/${env.PROJECT}/tests/@" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s@.*sonar.analysis.source_branch.*@sonar.analysis.source_branch=${env.BRANCH}/@" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i -e "s@.*sonar.projectVersion.*@sonar.projectVersion=${env.BRANCH}_${version_3_char}/@" '${env.PROJECT}'/sonar-project.properties """
       sh """ sed -i "\$ a sonar.analysis.build_number=${BUILD_NUMBER}" '${env.PROJECT}'/sonar-project.properties """
       sh """
         docker run --rm -w /var/www/'${env.PROJECT}' --volume \$(pwd)/'${env.PROJECT}':/var/www/'${env.PROJECT}' ciricihq/gitlab-sonar-scanner sonar-scanner
       """
       
    }
}
}